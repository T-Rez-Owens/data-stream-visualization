{"version":3,"sources":["Server.js","modules/database.js","modules/MongoDB.js","modules/ServerDrawLineGraph.js"],"names":["express","require","app","nunjucks","bodyParser","MongoClient","mongoReadyPromise","DrawLineGraph","assert","moment","path","use","static","join","__dirname","engine","set","urlencoded","extended","errorHandler","err","req","res","next","console","error","message","stack","status","render","get","post","sensor","body","value","date","Date","time","format","then","db","collection","insertOne","equal","find","toArray","docs","server","listen","port","address","log","load","uri","process","env","USER","PASS","HOST","PORT","DB","MongoDB","constructor","connect","Promise","resolve","reject","s","databaseName","module","exports"],"mappings":"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","file":"server.js","sourcesContent":["import \"babel-polyfill\";\n\nvar express = require('express'),\n    app = express(),\n    nunjucks = require('nunjucks'),\n    bodyParser = require('body-parser'),\n    MongoClient = require('mongodb').MongoClient,\n    mongoReadyPromise = require('./modules/MongoDB'),\n    DrawLineGraph = require('./modules/ServerDrawLineGraph'),\n    assert = require('assert'),\n    moment = require('moment'),\n    path = require('path');\n    \napp.use(express.static(path.join(__dirname + '/public')));\napp.engine('html', nunjucks);\napp.set('view engine', 'html');\napp.set('views', __dirname + '/views');\napp.use(bodyParser.urlencoded({ extended: true })); \n\n\n// Handler for internal server errors\nfunction errorHandler(err, req, res, next) {\n    console.error(err.message);\n    console.error(err.stack);\n    res.status(500).render('./client/views/error_template', { error: err });\n}\n\napp.use(errorHandler);\n\napp.get('/', function(req, res, next) {\n    res.render('./client/views/add_dataPoint', {});\n});\n\napp.post('/add_dataPoint', function(req, res, next) {\n    var sensor = req.body.sensor;\n    var value = req.body.value;\n    var date = new Date();\n    var time = moment().format('llll');\n\n    if ((sensor == '') || (value == '') ) {\n        next('Please provide an entry for all fields.');\n    } else {\n        mongoReadyPromise.then(db => {\n            db.collection('points').insertOne(\n                { 'sensor': sensor, 'value': value, 'time': time },\n                function (err) {\n                    assert.equal(null, err);\n                    db.collection('points').find({'sensor':sensor}).toArray(function(err,docs){\n                        res.render('./client/views/sensor', { 'points' : docs, 'value': value});\n                    });\n                }\n            );\n        });\n    }\n});\n\nvar server = app.listen(3000, function() {\n    var port = server.address().port;\n    console.log('Express server listening on port %s.', port);\n});","/*'use strict'\r\n\r\nconst MongoClient = require('mongodb')\r\n\r\nclass Database {\r\n\r\n  constructor (uri) {\r\n    this.uri = uri\r\n    this.db = {}\r\n    return this\r\n  }\r\n\r\n  connect () {\r\n    return new Promise((resolve, reject) => {\r\n      MongoClient.connect(this.uri, (err, db) => {\r\n        if (err) reject(err)\r\n        this.db = db\r\n        resolve(this)\r\n      })\r\n    })\r\n  }\r\n\r\n  addReport (domain) {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.collection('domains').findAndModify(\r\n        { domain: domain }\r\n      , {}\r\n      , { $inc: { reported: 1 } }\r\n      , { new: true, upsert: true }\r\n      , (err, data) => {\r\n          if (err) reject(err)\r\n          resolve(data)\r\n        })\r\n    })\r\n\r\n  }\r\n\r\n  findReport (domain) {\r\n    return new Promise((resolve, reject) => {\r\n      this.db.collection('domains').findOne(\r\n        { domain: domain }\r\n      , { _id: false, reported: true }\r\n      , (err, data) => {\r\n          if (err) reject(err)\r\n          if (data) {\r\n            resolve(data.reported)\r\n          } else {\r\n            resolve(0)\r\n          }\r\n        })\r\n    })\r\n  }\r\n}\r\n\r\nmodule.exports = Database\r\n*/","import mongoClient from 'mongodb';\r\nvar assert = require('assert'),\r\npath = require('path');\r\nrequire('dotenv').load();\r\nvar uri = 'mongodb://'+process.env.USER+':'+process.env.PASS+'@'+process.env.HOST+':'+process.env.PORT+'/'+process.env.DB;\r\n\r\nclass MongoDB{\r\n    constructor() {\r\n        this.connect();\r\n    }\r\n\r\n    connect() {\r\n        var mongoReadyPromise = new Promise((resolve, reject) => {\r\n            MongoClient.connect(uri, function(err, db) {\r\n                if(err!==null){\r\n                    reject(err);\r\n                }\r\n                assert.equal(null, err);\r\n                console.log(\"Successfully connected to /%s.\", db.s.databaseName);\r\n                resolve(db);\r\n            });\r\n            });\r\n            module.exports = mongoReadyPromise;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default MongoDB;\r\n\r\n\r\n",""],"sourceRoot":"/source/"}